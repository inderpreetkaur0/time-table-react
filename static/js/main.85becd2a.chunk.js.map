{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","originData","arr","index","i","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","children","record","restProps","inputNode","Item","style","margin","rules","required","message","EditableTable","Form","useForm","form","useState","data","setData","editingKey","setEditingKey","isEditing","cancel","save","a","validateFields","row","newData","findIndex","item","splice","console","log","mergedColumns","width","editable","render","_","href","onClick","marginRight","onConfirm","disabled","setFieldsValue","edit","map","col","onCell","component","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","pageSize","App","position","zIndex","className","color","onBack","subTitle","padding","marginTop","defaultValue","moment","minHeight","textAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.85becd2a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport moment from 'moment';\nimport { Table, Input, InputNumber, Popconfirm, Form, Layout, Breadcrumb, PageHeader, DatePicker } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\nconst originData = [];\nlet arr = [7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6];\nlet index = 0;\n\nfor (let i = 0; i < 100; i++) {\n  if(i%11 == 0) {\n    index = 0;\n  }\n  originData.push({\n    key: i.toString(),\n    name: `${arr[index]}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n  index++;\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{\n            margin: 0,\n          }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n          children\n        )}\n    </td>\n  );\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({ ...record });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Time Interval',\n      dataIndex: 'name',\n      width: '5%',\n      editable: true,\n    },\n    {\n      title: 'Monday',\n      dataIndex: 'Monday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Tuesday',\n      dataIndex: 'Tuesday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Wednesday',\n      dataIndex: 'Wednesday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Thursday',\n      dataIndex: 'Thursday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Friday',\n      dataIndex: 'Friday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Saturday',\n      dataIndex: 'Saturday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: 'Sunday',\n      dataIndex: 'Sunday',\n      width: '13%',\n      editable: true,\n    },\n    {\n      title: '',\n      dataIndex: 'operation',\n      render: (_, record) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <a\n              href=\"javascript:;\"\n              onClick={() => save(record.key)}\n              style={{\n                marginRight: 8,\n              }}\n            >\n              Save\n            </a>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n            <a disabled={editingKey !== ''} onClick={() => edit(record)}>\n              Edit\n            </a>\n          );\n      },\n    },\n  ];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n  return (\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel,\n          pageSize: 11\n        }}\n      />\n    </Form>\n  );\n};\n\nfunction App() {\n  return (<>\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%'}}>\n        <div className=\"logo\" />\n        <PageHeader style = {{ color : '#fff'}}\n    className=\"site-page-header\"\n    onBack={() => null}\n    title=\"Time Table\"\n    subTitle=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create your own custom time table\"\n  />\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>Time Table</Breadcrumb.Item>\n          <Breadcrumb.Item>Date</Breadcrumb.Item>\n        </Breadcrumb>\n        <div><DatePicker defaultValue={moment('2020-04-11', 'YYYY-MM-DD')}/></div>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <EditableTable />\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout></>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}